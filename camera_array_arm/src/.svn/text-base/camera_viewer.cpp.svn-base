
#include <ros/ros.h>

#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>

#include <sstream>
#include <string>

#include "opencv2/imgproc/imgproc_c.h"
#include "opencv2/legacy/legacy.hpp"
#include <cv.h>
#include <highgui.h>

int numimage;

using namespace cv;
using namespace ros;
using namespace std;
namespace enc = sensor_msgs::image_encodings;

static const std::string OPENCV_WINDOW = "Image window";

class ImageConverter
{
  image_transport::ImageTransport it_;
  image_transport::Subscriber image_sub_;
 // image_transport::Publisher image_pub_;
  
public:
  ImageConverter(ros::NodeHandle nh_, std::string s_name)
    : it_(nh_)
  {
	     ROS_INFO("quiB");

    // Subscrive to input video feed and publish output video feed
    image_sub_ = it_.subscribe(s_name, 1, 
      &ImageConverter::imageCb, this);
    //image_pub_ = it_.advertise("/image_converter/output_video", 1);

    cv::namedWindow("pippo");
    //sleep(5);
       ROS_INFO("quiC");

  }

  ~ImageConverter()
  {
    cv::destroyWindow("pippo");
  }

  void imageCb(const sensor_msgs::ImageConstPtr& msg)
  {
	         ROS_INFO("qui00");
    cv_bridge::CvImagePtr cv_ptr;
    try
    {
      cv_ptr = cv_bridge::toCvCopy(msg, sensor_msgs::image_encodings::BGR8);
	  ROS_INFO("received and converted frame %s" , msg->encoding.c_str());
	  
	  
   
       ROS_INFO("qui1");
    if(!cv_ptr->image.empty())
    {
       cv::imshow("pippo", cv_ptr->image);
          cv::waitKey(0);
          ROS_INFO("qui2");
}



    }
    catch (cv_bridge::Exception& e)
    {
      ROS_ERROR("cv_bridge exception: %s", e.what());
      return;
    }
    
    
    // Draw an example circle on the video stream
//     if (cv_ptr->image.rows > 60 && cv_ptr->image.cols > 60)
//       cv::circle(cv_ptr->image, cv::Point(50, 50), 10, CV_RGB(255,0,0));
    // Update GUI Window

    // Output modified video stream
   // image_pub_.publish(cv_ptr->toImageMsg());
  }
};



































/**
 * This tutorial demonstrates simple receipt of messages over the ROS system.
 */
/*void chatterCallback(const sensor_msgs::Image::ConstPtr& pippo)
{
	try {
		sensor_msgs::CvBridge cvBridge;
		cv::Mat temp = cvBridge.imgMsgToCv(msg);
		std::stringstream s;
		s<<numimage<<".png";
		cv::imwrite(s.str().c_str(), temp);
		numimage++;
	 } catch (sensor_msgs::CvBridgeException error) {
		ROS_ERROR("error converting image message");
	 }
}*/

int main(int argc, char **argv)
{
	numimage = 0;
	/**
   * The ros::init() function needs to see argc and argv so that it can perform
   * any ROS arguments and name remapping that were provided at the command line. For programmatic
   * remappings you can use a different version of init() which takes remappings
   * directly, but for most command-line programs, passing argc and argv is the easiest
   * way to do it.  The third argument to init() is the name of the node.
   *
   * You must call one of the versions of ros::init() before using any other
   * part of the ROS system.
   */
  ros::init(argc, argv, "listener");

  /**
   * NodeHandle is the main access point to communications with the ROS system.
   * The first NodeHandle constructed will fully initialize this node, and the last
   * NodeHandle destructed will close down the node.
   */
  ros::NodeHandle n;

  /**
   * The subscribe() call is how you tell ROS that you want to receive messages
   * on a given topic.  This invokes a call to the ROS
   * master node, which keeps a registry of who is publishing and who
   * is subscribing.  Messages are passed to a callback function, here
   * called chatterCallback.  subscribe() returns a Subscriber object that you
   * must hold on to until you want to unsubscribe.  When all copies of the Subscriber
   * object go out of scope, this callback will automatically be unsubscribed from
   * this topic.
   *
   * The second parameter to the subscribe() function is the size of the message
   * queue.  If messages are arriving faster than they are being processed, this
   * is the number of messages that will be buffered up before beginning to throw
   * away the oldest ones.
   */
   
   ROS_INFO("quiA");

   //ImageConverter cam1(n, "camera1/image_raw");
   ImageConverter cam2(n, "camera2/image_raw");
   //ImageConverter cam3(n, "camera3/image_raw");
   //ImageConverter cam4(n, "camera4/image_raw");
 //  ros::Subscriber sub1 = n.subscribe("camera1/image_raw", 1000, chatterCallback);
 //  ros::Subscriber sub2 = n.subscribe("camera2/image_raw", 1000, chatterCallback);
 //  ros::Subscriber sub3 = n.subscribe("camera3/image_raw", 1000, chatterCallback);
 //  ros::Subscriber sub4 = n.subscribe("camera4/image_raw", 1000, chatterCallback);

  /**
   * ros::spin() will enter a loop, pumping callbacks.  With this version, all
   * callbacks will be called from within this thread (the main one).  ros::spin()
   * will exit when Ctrl-C is pressed, or the node is shutdown by the master.
   */
  ros::spin();

  return 0;
}
